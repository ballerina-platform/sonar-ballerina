/*
 * Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort
import java.nio.file.Paths
import java.util.jar.JarInputStream

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'maven-publish'
    id "com.github.spotbugs"
    id "de.undercouch.download"
    id "io.spring.dependency-management"
}

group = "${group}"
version = "${version}"

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()

    maven {
        url = uri("https://plugins.gradle.org/m2/")
    }
}

dependencies {
    compileOnly group: 'org.sonarsource.api.plugin', name: 'sonar-plugin-api', version: "${sonarPluginAPIVersion}"

    implementation group: 'org.sonarsource.analyzer-commons', name: 'sonar-analyzer-commons', version: "${sonarAnalyzerCommonsVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: "${apacheCommonsVersion}"
    implementation group: 'org.commonmark', name: 'commonmark', version: "${commonMarkVersion}"

    checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: "${puppycrawlCheckstyleVersion}"

    testImplementation group: 'org.testng', name: 'testng', version: "${testngVersion}"
    testImplementation group: 'org.sonarsource.sonarqube', name: 'sonar-plugin-api-impl', version: "${sonarQubeVersion}"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

// Setting up checkstyle
task downloadCheckstyleRuleFiles(type: Download) {
    src([
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/checkstyle.xml',
            'https://raw.githubusercontent.com/wso2/code-quality-tools/v1.4/checkstyle/jdk-17/suppressions.xml'
    ])
    overwrite false
    onlyIfNewer true
    dest buildDir
}

artifacts.add('default', file("${project.buildDir}/checkstyle.xml")) {
    builtBy(downloadCheckstyleRuleFiles)
}

artifacts.add('default', file("${project.buildDir}/suppressions.xml")) {
    builtBy(downloadCheckstyleRuleFiles)
}

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle) {
    exclude excludePattern
}

checkstyle {
    toolVersion puppycrawlCheckstyleVersion
    configFile rootProject.file("${project.buildDir}/checkstyle.xml")
    configProperties = ["suppressionFile": file("${project.buildDir}/build/suppressions.xml")]
}

checkstyleTest {
    enabled = true
}

checkstyleMain.dependsOn(downloadCheckstyleRuleFiles)
checkstyleTest.dependsOn(downloadCheckstyleRuleFiles)

// Setting up spotbugs
spotbugsMain {
    effort = Effort.valueOf("MAX")
    reportLevel = Confidence.valueOf("LOW")

    reportsDir = file("$project.buildDir/reports/spotbugs")

    reports {
        html.required.set(true)
        text.required.set(true)
    }

    def excludeFile = file("${projectDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsTest {
    effort = Effort.valueOf("MAX")
    reportLevel = Confidence.valueOf("LOW")

    reportsDir = file("$project.buildDir/reports/spotbugs")

    reports {
        html.required.set(true)
        text.required.set(true)
    }

    def excludeFile = file("${projectDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

// Configurations for testing
tasks.test {
    dependsOn ':sonar-platform-plugin:build'

    doFirst {
        def targetJarDir = Paths.get("src", "test", "resources", "test-resources").toFile()
        def targetJar = new File(targetJarDir, "sonar-platform-plugin-${version}.jar")
        if (targetJar.exists()) {
            delete targetJar
        }

        def platformPluginJar = project(":sonar-platform-plugin").buildDir.toPath()
                .resolve("libs/sonar-platform-plugin-${version}.jar").toFile()
        copy {
            from platformPluginJar
            into targetJarDir
        }
    }

    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

configurations {
    testImplementation {
        extendsFrom compileOnly
    }
}

// JAR configurations
ext {
    set("buildNumber", System.getProperty("buildNumber"))
}

tasks.jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    manifest {
        def displayVersion = (project.property("buildNumber") == null ? project.version : project.version.substring(0, project.version.lastIndexOf('.')) + " (build ${project.property("buildNumber")})")
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'io.ballerina.sonar.BallerinaPlugin',
                'Plugin-Description': 'Code Analyzer for Ballerina',
                'Plugin-Developers': 'WSO2',
                'Plugin-Display-Version': displayVersion,
                'Plugin-Key': 'ballerina',
                'Plugin-License': 'Apache-2.0',
                'Plugin-Name': 'Ballerina Code Quality and Security',
                'Plugin-Organization': 'WSO2',
                'Plugin-OrganizationUrl': 'https://wso2.com/',
                'Plugin-SourcesUrl': 'https://ballerina.io/',
                'Plugin-Version': project.version,
                'Plugin-RequiredForLanguages': 'ballerina',
                'Sonar-Version': '6.7',
                'Version': "${project.version}",
                'Jre-Min-Version': '17'
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude('com/ctc/**')
    exclude('javax/**')
    exclude('license/**')
    exclude('META-INF/maven/**')
    exclude('META-INF/versions/**')
    exclude('META-INF/LICENSE')
    exclude('META-INF/LICENSE.txt')
    exclude('META-INF/NOTICE')
    exclude('META-INF/NOTICE.txt')
    exclude('META-INF/services/**')
    exclude('org/apache/xerces/**')
    exclude('org/apache/xml/**')
    exclude('org/sonarsource/performance/**')
    exclude('module-info.class')

    doLast {
        enforceJarSizeAndCheckContent(archiveFile.get().asFile, 10L, 500_000_000L)
    }
}

static void enforceJarSizeAndCheckContent(File file, long minSize, long maxSize) {
    long size = file.length()
    if (size < minSize) {
        throw new GradleException("${file.path} size ($size) too small. Min is $minSize")
    } else if (size > maxSize) {
        throw new GradleException("${file.path} size ($size) too large. Max is $maxSize")
    }
    checkJarEntriesPathUniqueness file
}

static void checkJarEntriesPathUniqueness(File file) {
    def allNames = new HashSet()
    def duplicatedNames = new HashSet()
    file.withInputStream { input ->
        new JarInputStream(input).withCloseable { jarInput ->
            for (def jarEntry = jarInput.nextJarEntry; jarEntry != null; jarEntry = jarInput.nextJarEntry) {
                if (!allNames.add(jarEntry.name)) {
                    duplicatedNames.add jarEntry.name
                }
            }
        }
    }
    if (!duplicatedNames.empty) {
        throw new GradleException("Duplicated entries in the jar: '${file.path}': ${duplicatedNames.join(', ')}")
    }
}

def tomlFilePairs = [
        [
                placeholder: file("${project.projectDir}/src/test/resources/test-resources/ballerina-project-with-report/resources/Scan.toml"),
                output: file("${project.projectDir}/src/test/resources/test-resources/ballerina-project-with-report/Scan.toml")
        ],
        [
                placeholder: file("${project.projectDir}/src/test/resources/test-resources/ballerina-project-wo-report/resources/Scan.toml"),
                output: file("${project.projectDir}/src/test/resources/test-resources/ballerina-project-wo-report/Scan.toml")
        ]
]

def tomlUpdateTasks = []

tomlFilePairs.eachWithIndex { pair, index ->
    def taskName = "updateTestTomlFile${index}"
    def updateTask = tasks.register(taskName) {
        inputs.property("projectVersion", project.version)

        doLast {
            def newScanToml = pair.placeholder.text.replace("@project.version@", "${project.version}")
            pair.output.parentFile.mkdirs()
            pair.output.text = newScanToml
        }
    }

    tomlUpdateTasks << updateTask
}

["processTestResources", "spotbugsTest", "test"].each { taskName ->
    tasks.named(taskName) {
        dependsOn tomlUpdateTasks
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId group
            artifactId project.name
            version version
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/sonar-ballerina")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}
